#! /bin/bash

# set -x

confdir=${XDG_CONFIG_HOME:-$HOME/.config}/zmk
cachedir=${XDG_CACHE_HOME:-$HOME/.cache}/zupdate
config=${confdir}/zmk.config

[ -f $config ] && source $config

if [ -z "$dest" ]; then
	die "'dest' is not set"
fi


function die()
{
	echo $*
	exit 1
}

function cksum()
{
	local file=$1
	if [ -f "$file" ]; then
		sha1sum -b $file | cut -d ' ' -f1
	fi
}

##################################################################
# File publishing

function file()
{
	local cmd=$1
	case $cmd in
	begin)
		;;
	end)
		sync
		;;
	send)
		local src=$2
		local dst=${3#*://}
		local dir=${dst%/*}

		mkdir -p $dir || die "unable to create dir: $dir"

		if [ ! -f "$dst" -o "$src" -nt "$dst" ]; then
			echo " (update)"
			${cross}objcopy --strip-unneeded "$src" "$dst" || die "Unable to copy $src into $dst"
		else
			echo " (skip)"
		fi
		;;
	esac
}

###################################################################
## remote
function remote()
{
	local cmd=$1
	case $cmd in
	begin)

		local dst=$2
		local full_upgrade=yes

		if [[ "$dst" =~ ^.*://([^:/]+)(:([0-9]+))?(.*)$ ]]; then
			rm_server=${BASH_REMATCH[1]}
			rm_port=${BASH_REMATCH[3]}
			rm_dir=${BASH_REMATCH[4]}
		else
			die "Unvalid file specification '$dest'"
		fi

		rm_tmpdir=${cachedir}/${rm_server}
		rm_modefile=${rm_tmpdir}/mode
		rm_newmode="$platform-$cpu-$mso-$mode"

		[ -d "${rm_tmpdir}" ] || mkdir -p "${rm_tmpdir}" || die "unable to create temp dir: ${rm_tmpdir}"
    
		if [ -f ${rm_modefile} ]; then
			local lastmode=$(< ${rm_modefile})
#			echo last mode:$lastmode, new mode:${rm_newmode}
			if [ "${rm_newmode}" == "$lastmode" ]; then
				full_upgrade=no
			fi
		fi

		if [ "$full_upgrade" == "yes" ]; then
			echo "Perform full upgrade"
			rm -rf ${rm_tmpdir}/*
		fi

		echo "publish via ${rm_tmpdir}"
#		echo "update to ${rm_newmode}"
	    ;;

	end)
#		echo "update to ${rm_newmode}"
		echo ${rm_newmode} > ${rm_modefile}
		;;

	send)
		local src=$2
		local dst=$3
		local temp=${rm_tmpdir}/${src##*/}
		local src_cksum=$(cksum $src)
		local imm_cksum=$(cksum $temp)
		local opts

		mkdir -p ${rm_tmpdir} || die "unable to create dir: ${rm_tmpdir}"
		rm_path=/${dst#*://*/}
		rm_dir=${rm_path%/*}
		rm_file=${rm_path##*/}

		if [ "$src_cksum" != "$imm_cksum" ]; then
			echo " (update)"
			${cross}objcopy --strip-unneeded $src $temp || die "Unable to strip $src into $temp"

			if ! $publisher upload $temp $dst; then
				rm $temp
				die "Unable to send file $temp to $dst"
			fi
		else
			echo " (skip)"
		fi
		;;
	esac
}

###################################################################
# curl publishing

function curl()
{
	local cmd=$1
	case $cmd in
	begin)
		local dst=$2

		curl_exe=$(which curl)
		case $dst in
		sftp://*) curl_opts="--insecure --key ${HOME}/.ssh/id_rsa --pubkey ${HOME}/.ssh/id_rsa.pub";;
		*)        curl_opts="--insecure --netrc";;
		esac
		remote $*
		;;

	end|send)
		remote $*
	    ;;

	upload)
		local src=$2
		local dst=$3

		# -u <user:password> vs --netrc

		# curl --insecure --key ~/.ssh/id_rsa --pubkey ~/.ssh/id_rsa.pub --upload-file ./output/c5320-mips-cvc/dev/DALManager scp://oleg.sesov@192.168.23.200/upload/DalManager
		# curl --ftp-create-dirs --insecure --key ~/.ssh/id_rsa --pubkey ~/.ssh/id_rsa.pub --upload-file ./output/c5320-mips-cvc/dev/DALManager sftp://oleg.sesov@192.168.23.200/~/upload/a/b/c/DalManager

		if ! $curl_exe --progress-bar --ftp-create-dirs $curl_opts --upload-file $src $dst < /dev/null; then
			return 1
		fi
#			curl --insecure --progress-bar --ftp-create-dirs --netrc --upload-file $temp $dst < /dev/null 2> /dev/null || die "Unable to send file $temp to $dst"
		
		;;
	esac
}

###################################################################
# sftp publishing

function scp()
{
	local cmd=$1

	case $cmd in
	upload)
		local src=$2
		local dst=$3

		$(which scp) -C ${rm_port:+-P ${rm_port}} -i ${HOME}/.ssh/id_rsa $src ${rm_user:+$rm_user@}$rm_server:$rm_path
		;;
	*)
		remote $*
		;;
	esac
}

######################################################################
function send_file()
{
	local src=$1
	local dst=$2

	echo -ne "    ${src##*/} -> $dst"
	if [ ! -f "$src" ]; then
		echo " (source not found, file: $src cwd: $(pwd))"
		return 1
	fi

	$publisher send $*
}


function dist_files()
{
	for i in $@; do
		files+=("$i")
	done
}

#pwd

while (( $# )); do
	case $1 in
	--source) shift; source=$1  ;;
	--target) shift; target=$1  ;;
	--dest)   shift; dest=$1    ;;
	--)       shift;

		while (( $# )); do
			dist_files "$1"
			shift
		done
		break
		;;

	-*)
		die "Unknown option $1";;
	*)
		break;;
	esac
	shift
done

if [ -z "$target" ]; then
	target=$1
	shift;
fi

if [ -z "$source" ]; then
	source=${1:-..}
	shift
fi

if [ -z "$target" ]; then
	die "Target is not set"
fi


case $dest in
	*://*)
		;;

	*)
		alt_dir="/media/E417-7216 /media/usb"

		for i in $alt_dir; do
			if [ -d "$i" ]; then
				dest=$i/dal
				break;
			fi
		done
		;;
esac

if [ -z "$dest" ]; then
	echo "unable to detect top dir"
	exit 1
fi

IFS='-' read mso platform mode <<< "$target"

case $target in
	*-c5320-*|*-samsung-*|*-humax-*|*-humaxwb-*)
		cross=mipsel-linux-
		cpu=mips;;
	*-samsung4k-*|*-humax4k-*)
		cross=arm-linux-
		cpu=arm;;
	*) die "Unknown CPU $target";;
esac

# toolchain
case $target in
	*-c5320-*|*-samsung-*|*-humax-*)
		toolchain=/opt/toolchains/gcc-4.2.0/bin;;
	*-humaxwb-*)
		toolchain=/opt/toolchains/stbgcc-4.5.4-2.8/bin;;
	*) die "Unknown toolchain $target";;
esac

${toolchain:+eval PATH=$toolchain:$PATH}

# normalize destination url
case $dest in
    *://*) ;;
    *)     dest=file://$dest;;
esac

src=$source/output/$platform-$cpu-$mso/$mode
#src=../output/c5320-mips-cvc/dev


echo "publish ($src) to $dest"

if (( $# )); then
	for i in "$@"; do
		dist_files "$i"
	done
fi

# load defaults
if (( ${#files[@]} == 0 )); then
	dist_files  DALManager
	dist_files  libpowerup.so libtoopl.so libsdv.so libprofile.so libipg.so libekg.so
	dist_files  libdc.so libns.so libdts.so libzvod.so
	dist_files  libpowerup-api.so
	dist_files  libdvbs.so
	dist_files  libskia.so
	dist_files  ncas_host_app supervisor dpi_host_app
	dist_files  powerup-launcher
	dist_files  libcarousels.so libipc.so
	dist_files  libnetsnmpagent.so libnetsnmphelpers.so libnetsnmpmibs.so libnetsnmp.so
	dist_files  libyaml.so libz.so libjpeg.so libfreetype.so libcurl.so
	dist_files  libbreakpad_client.so libpng.so
	dist_files  libmemdebug.so
fi

# Check publisher

if [ -z "$puhlisher" ]; then
	case $dest in
	file://*) publisher=file;;
	svn://*)  publisher=svn ;;
	sftp://*) publisher=curl ;;
	scp://*)  publisher=scp ;;
	*://*)    publisher=curl ;;
	esac
fi

[ -n "$publisher" ] || die "Unknown publisher"

echo "Publish $target from '$source' to '$dest'"
$publisher begin $dest

for i in $files; do
    case $i in
    *:*) send_file $src/${i%:*} $dest/${i##*:};;
    *)   send_file $src/$i $dest/$i;;
    esac
done

$publisher end $dest

for g in ${group_cfg[@]}; do
	
	old_ifs=$IFS
	IFS=':'
	read path search replace <<< "$g"
	IFS=$old_ifs

	echo "Update $path with '$search' = '$replace'"
	update-group-cfg $path "$search" "$replace"
done
