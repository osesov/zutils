#! /bin/bash

# set -x

unset LANG

sln=PowerUp.sln
topsln="PowerUp.sln MotoASTB.sln"
confdir=${XDG_CONFIG_HOME:-$HOME/.config}/zmk
config=${confdir}/zmk.config
os=$(uname -s | tr '[:upper:]' '[:lower:]')

declare -A toolchain
declare -A target
declare -A dest

[ -d "$confdir" ] || mkdir -p "$confdir"
[ -f "$config" ] && source "$config"

function die()
{
    echo "$@"
    exit 1
}

function trace()
{
    echo "$*"
}

function debug()
{
#    echo "$*"
    :
}

function split()
{
	old_ifs=$IFS
	IFS=$1; shift
	string=$1; shift
	eval "read $* <<< '$string'"
	IFS=$old_ifs
}

function with-target()
{
	local build_target=$1

	if [ -z "$build_target" ]; then
		die "Target is not set"
	fi

	IFS='-' read mso platform mode <<< "$build_target"

	case $build_target in
		*-c5320-*|*-samsung-*|*-humax-*|*-humaxwb-*|*-ciscowb-*|*-pace-*)
			cpu=mips;;
		*-samsung4k-*|*-humax4k-*)
			cpu=arm;;
		*-posix-*)
			cpu=posix;;
		*) die "Unknown CPU $build_target";;
	esac
}

function mksymbols()
{
	builddir=../output/${platform}-${cpu}-${mso}/${mode}
	symdir=../symbols/${platform}-${cpu}-${mso}/${mode}

	mkdir -p ${symdir}
	for i in $builddir/*.sym; do
		read module os arch hash name < <(head -n1 $i)
		mkdir -p ${symdir}/$name/$hash/
		cp -u $i ${symdir}/$name/$hash/
	done
}

function gensymbols-stripped()
{
	local builddir=$1
	local symdir=$2

	mkdir -p ${symdir}
	for i in $builddir/*; do
		type=$(file $i)
		local sym=$i.sym
		local name
		local hash

		if [[ $i =~ .*.dbg ]]; then
			continue
		fi
		if [[ "$type" =~ executable|shared\ object ]]; then
			if [ "$i" -nt "$sym" ]; then
				echo "Generate symbols $i => $sym"
#				mipsel-linux-strip -s $i
				dump_syms $i 2> >(grep -v 'file contains no debugging information') > $sym
			fi

			read module os arch hash name < <(head -n1 $sym)
#			echo "cp -vu $sym ${symdir}/$name/$hash/ (" $(head -n1 $sym) ")"
			mkdir -p ${symdir}/$name/$hash/
			cp -u $sym ${symdir}/$name/$hash/
		fi
	done
}

function mksymbols-stripped()
{
	builddir=../output/${platform}-${cpu}-${mso}/${mode}
	osdir=../osdir/${platform}-${cpu}-${mso}
	symdir=../symbols/${platform}-${cpu}-${mso}/${mode}

	gensymbols-stripped $builddir $symdir
	gensymbols-stripped $osdir $symdir
}

function stackwalk()
{
	local name
	mksymbols
#	mksymbols-stripped
#	ls -l ../symbols/${platform}-${cpu}-${mso}/${mode}

	if [ ! -f "$1" ]; then
		return
	fi

	case $1 in
	*.gz) gunzip $1; name=${1%%.gz};;
	*)    name=$1;
	esac

#	minidump_stackwalk $name ../symbols/${platform}-${cpu}-${mso}/${mode} 2> $name.info | grep -v "[a-z][a-z0-9] = \|Found by:" | mipsel-linux-c++filt > $name.text
	minidump_stackwalk $name ../symbols/${platform}-${cpu}-${mso}/${mode} 2> $name.info > $name.text
}

function show-status()
{
	local i
	case $scope in
	world)
		for i in *; do
			if [ -d "$i/.svn" ]; then
				echo "[svn] $i"
				(cd $i && svn status)
			elif [ -d "$i/.git" ]; then
				echo "[git] $i"
				(cd $i && git status -s)
			elif [ -d "$i" ]; then
				echo "skip $i"
			fi
		done
		;;

	*)
		i=$(pwd)
		local n=${i##*/}
		if [ -d ".svn" ]; then
			echo "[svn] $n"
			svn status
		elif [ -d ".git" ]; then
			echo "[git] $n"
			git status
		else
			echo "skip $n"
		fi
		;;
	esac
}

function checkout()
{
	local svn_rev
	local git_rev

	if [[ "$1" =~ ([0-9]+)-([0-9]+)-([0-9]+) ]]; then
		local year=${BASH_REMATCH[1]}
		local month=${BASH_REMATCH[2]}
		local day=${BASH_REMATCH[3]}

		svn_rev="{$year-$month-$day}"
		git_rev="{$year-$month-$day 00:00:00}"
	else
		die "Unvalid date specification '$1'"
	fi

	cat solution | grep -v "^#" | while read build repo branch; do
		if [ -z "$repo" ]; then
			continue
		fi

		local dir=${build%%/*}
		pushd $dir > /dev/null || die "Unable to open dir: $dir"
		echo [$dir]

		if [ -d .svn ]; then
			svn update -r "$svn_rev"
		elif [ -d .git ]; then
			eval "$branch"
			git checkout "$BRANCH@$git_rev"
		else
		    die "unknown vcs: $dir"
		fi
		popd > /dev/null
	done
}

function common-prefix()
{
	local n=0
	local x=$((${#1}<${#2}?${#1}:${#2}))
	local s=0
#	echo -ne $x:
	while [[ ($n -lt $x) && ("${1:n:1}" == "${2:n:1}") ]]; do
		if [[ ${1:n:1} == '/' ]]; then
			s=$n
		fi
		((n++))
#		echo -ne "[$n ${1:n:1}" "${2:n:1}]"
	done
	echo "${1:0:$s}"
}

function realpath()
{
#    pushd "$1" | cut -d ' ' -f 1
    cd "$1" && pwd
}


function build-sln-entry()
{
	local dir=$1
	local build_target=$2
	local action=$3

	if [ "$dryrun" != "yes" ]; then
	(
		cd $dir
		bash ./make.sh ${action}${build_target} || exit 1
	) || return 1
	fi
}

function build-solution()
{
	local X
	local TEMP
	local params
	local build
	local skip
	local curdir=$(realpath $1)/
	local slndir=$(pwd)
	local dir
	local build_prefix=0
	local build_target=$2
	local action=$3
	local cur
	local build_mode=regular

	declare -A params
	[ -f solution ] || die "'solution' file is not found"

	if [[ $scope = "project" ]]; then
		# save one level of directory from curdir
		curdir=${curdir#$slndir/}   # strip $slndir from the left
		curdir=${curdir%%/*}        # strip all the path names from the right, except first one
		curdir=${slndir}/${curdir}/ # combine the upper level project name
	fi

	case $action in
	build) action=;;
	clean) action=clean-;
	esac

	while read a || [ -n "$a" ]; do
		params=()
		[ "${a:0:1}" != "#" ] || continue
		debug
		read -ra INFO <<< "$a"
		params[DIR]="${INFO[0]}"
		dir="${INFO[0]}"
		unset INFO[0]
		for i in "${INFO[@]}"; do
			case $i in
			PARAMS=*)
				IFS=',' read -ra TEMP <<< "${i#PARAMS=}"
				for j in "${TEMP[@]}"; do
					IFS=':' read -ra X <<< "${j}"
					params[${X[0]}]=${X[1]}
				done
				;;
			*)
				IFS='=' read -ra TEMP <<< "$i"
				params[${TEMP[0]}]=${TEMP[1]}
				;;
			esac
		done

		debug "check solution line: '$a'"
		debug "dir: $dir"
		cur=${#build[*]}
		build[$cur]="$dir"
		skip[$cur]=regular

		for i in "${!params[@]}"; do
			debug "$i -> ${params[$i]}"
		done

		if [ -n "${params[dontbuild]+abc}" ]; then
			debug "dontbuild flag is set, do not build"
			skip[$cur]=yes
			continue
		fi

		if [ "${params[os]:-$os}" != "$os" ]; then
			debug "OS doesn't match (curent: $s, expected ${params[os]}), do not build"
			skip[$cur]=yes
			continue
		fi

		dir="${params[copath]:-$dir}"
		if [ ! -d "$dir" ]; then
			debug "build_target path doesn't exist"
			skip[$cur]=yes
			continue
		fi

		if [ "$scope" = world ]; then
			continue
		fi

		dir=$(realpath $dir)/
		prefix=$(common-prefix $dir $curdir)
		n=${#prefix}
		debug "check  '$dir'"
		debug "curdir '$curdir'"
		debug "slndir '$slndir'/${#slndir}"
		debug "prefix '$prefix'/${n}"

		if [[ "$dir" = "$prefix" ]]; then	# full match
			debug "exact match"
			skip[$cur]=exact
			build_mode=exact
		fi

		# check for partial match
		if [ $n -lt ${#slndir} ]; then
			debug "match in another dir, do not build"
			skip[$cur]=yes
			continue
		fi

		## append to build queue
		if [ $n -lt $build_prefix ]; then
			debug "match is shorter, do not build"
			skip[$cur]=yes
			continue;
		fi

		if [ $n -gt $build_prefix ]; then
			debug "found longer match, reset queue"
			build_prefix=$n
			for k in ${!skip[@]}; do
				if [ "$k" != "$cur" -a "${skip[$k]}" = "regular" ]; then
					skip[$k]=yes
				fi
			done
		fi

	done < solution

	for k in ${!skip[@]}; do
		if [ "${skip[$k]}" = "$build_mode" ]; then
			echo Make ${build[$k]} --- $build_target
			if ! build-sln-entry ${build[$k]} $build_target $action; then
				exit 1
			fi
		else
			: echo Skip ${build[$k]}

		fi
	done
}


function build-makefile()
{
	local curdir=$1
	local build_target=$2
	local action=$3

	cd $slndir
	case $action in
	build) bash ./make.sh $build_target || exit 1;;
	clean) bash ./make.sh clean-$build_target || exit 1;;
	esac
}

function make-sh()
{
    local builder=$(echo "$makefile" | tr '[:upper:]' '[:lower:]') 
    local action="$1"
    local build_target="$2"

    case "$builder" in
    makefile|solution)
	: ;;
    powerup.sln)
	builder=solution
	;;
    esac

    case $action in
    build)
		build-$builder $curdir $build_target $action || exit 1
#		bash ./make.sh $2 || exit 1
		if [ "$scope" == "world" ]; then
			if [ "$mode" == "dbg" -o "$ENABLE_DEBUG_SYMBOLS" = "1" ]; then
				echo "Use debug symbols"
				mksymbols
			else
				echo "use stripped symbols"
				mksymbols-stripped
		    fi
		fi
		;;
    clean)      build-$builder  $curdir  $build_target  $action || exit 1;; # cd ${curdir}; bash ./make.sh clean-$build_target ;;
    rebuild)    make-sh clean $build_target && make-sh build $build_target;;
    update)     cd ../.. && ./vcs.sh update;;
    get-config) echo $build_target;;
    bt)         for i in $bt; do stackwalk $i; done ;;
    status)	show-status;;
    upload)	make-sh build $build_target && zupload $build_target ;;
    xupload)	zupload $build_target ;;
    checkout)	checkout $checkout_date;;
    *)          echo Action is not supported; exit 1 ;; 
    esac
}

function push-list()
{
	local name="$1"
	local value="$2"

	if [ -z "${!name}" ]; then
		eval $name="$value"
	else
		eval "$name='${!name} $value'"
	fi
}

function findfile()
{
	local makefile_list="$1"
	local dir_list="$2"
	local p="$(pwd)"

	while [ "$p" != "/" ]; do
		for makefile in $makefile_list; do
			if [ -f $p/$makefile ]; then
				echo $p/$makefile
				return 0
			fi
			for dir in $dir_list; do
				if [ -f $p/$dir/$makefile ]; then
					echo $p/$dir/$makefile
					return 0
				fi
			done
		done
		p=`dirname $p`
	done

	return 1
}

echo "*** make using Zodiac build system"

curdir=$(pwd)
while test $# -ne 0; do
    i=$1
    shift

    case "$i" in
	--dirtrace|--dir-trace)
		export ENABLE_DIRTRACE=1
		export DISABLE_COLORS=1
		;;

	--clean|--build|--rebuild|--resend)
		action=${i:2}
		;;

	clean|build|rebuild|resend)
		action=${i}
		;;

	--mod|-mod|-c|m|module)
		scope="module"
		;;

	--prj|-prj|-p|p|prj|project)
		scope="project"
		;;

	--world|-world|-w|world|w)
		scope="world"
		;;

	u|upload)
		scope="world"
		action=upload
		;;

	xu|xupload)
		scope="world"
		action=xupload
		;;

	--module|--world|--upload|--project)
		scope=${i:2}
		;;

	update|--update)
		scope=world
		action=update
		;;

	bt)
		scope=world
		push-list action "$i"
		i=$1
		shift
		push-list bt $(pwd)/$i
		;;

	set-config|--set-config)
		scope=world
		push-list action "set-config"
		;;

	get-config|--get-config)
		scope=world
		push-list action "get-config"
		;;

	status)
		action=$i
		scope=project
		;;

	wstatus)
		scope=world
		action=${i:1}
		;;

	checkout)
		checkout_date=$1
		shift
		action=$i
		;;

	--dry-run|-n)
		dryrun=yes
		;;

	--*|-*)
		echo "Unknown option $i";
		exit 1
		;;

	*)	push-list cl_target "$i"
		;;

    esac

done

if [ -n "$cl_target" ]; then
	build_target="$cl_target"

elif [ -n "$target" ]; then
	build_target=${target}

elif [ -z "$target" ]; then
	if ! f=$(findfile "$topsln" "native/apps apps ../apps"); then
		die "Can't find PowerUp.sln"
	fi

	dir=$(cd ${f%/*}/../..; x=$(pwd); echo ${x##*/})

	if test ${target[$dir]+_}; then
		build_target=${target[$dir]}
	else
		die "target is not set for $dir"
	fi
fi

if [ -z "$build_target" ]; then
	build_target=cvc-c5320-dev
##	build_target=cvc-humax-dev
fi

if [ -z "$action" ]; then
	action=build
fi


if [ -z "$scope" ]; then
	if [ -f "$sln" -o -f "apps/$sln" -o -f "native/apps/$sln" ]; then
	    scope="world";
	else
	    scope="module"
	fi
fi

case $scope in
world)
	makefile_list="$topsln"
	build=make-sh
	dir_list="native/apps apps ../apps"
	echo "*** build world ***"
	;;

module)
	makefile_list="solution makefile"
	build=make-sh
	echo "*** build module ***"
	;;

project)
	makefile_list="$topsln"
	build=make-sh
	echo "*** build project ***"
	;;

esac

if ! p=$(findfile "$makefile_list" "$dir_list") ; then
	echo "makefile not found ($makefile_list)"
	exit 1
fi
slndir=${p%/*}
makefile=${p##*/}

echo slndir: $slndir
echo curdir: $curdir
echo makefile: $makefile

if [ -z "$makefile" -o ! -f "$p" ]; then
	echo "makefile not found ($makefile_list)"
	exit 1
fi

#echo "Using dir: $p"
cd $slndir

export ENABLE_DEBUG_SYMBOLS=1
#export LDFLAGS=-g
#export CFLAGS=-g
#export CXXFLAGS=-g

echo "Build $scope $build_target"
for t in $build_target; do
    with-target $t
    OLD_PATH=$PATH
    export PATH="${toolchain[$platform]}:${PATH}"
    for i in "$action"; do
	$build $i $t || exit 1
    done
    export PATH="$OLD_PATH"
done
